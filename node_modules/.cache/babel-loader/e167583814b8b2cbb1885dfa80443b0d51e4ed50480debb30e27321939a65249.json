{"ast":null,"code":"var _jsxFileName = \"/Users/ahmetmenevse/code/ahmetmenevse/tic/tic-tac-toe/tic-tac/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport GameBoard from './Components/GameBoard';\nimport Square from './Components/Square';\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst newBoard = [['X', null, null], [null, 'O', null], [null, null, null]];\nfunction App() {\n  _s();\n  const [game, setGame] = useState({\n    currentPlayer: 'O',\n    oScore: 0,\n    xScore: 0,\n    board: newBoard,\n    gameOver: false\n  });\n  const nextTurn = () => {\n    const nextPlayer = game.currentPlayer === 'O' ? 'X' : 'O';\n    return nextPlayer;\n  };\n  const checkWin = currentBoard => {\n    // Check win conditions...\n\n    // Return true if win condition is met\n    return false;\n  };\n  const resetBoard = () => {\n    setGame({\n      ...game,\n      board: newBoard,\n      currentPlayer: 'O',\n      gameOver: false\n    });\n  };\n  const takeTurn = (event, i) => {\n    event.preventDefault();\n\n    // Don't continue if game is already over\n    if (game.gameOver) return;\n    let currentBoard = game.board;\n\n    // Update the board state based on the player's move\n    if (i === 0) currentBoard[0][0] = game.currentPlayer;else if (i === 1) currentBoard[0][1] = game.currentPlayer;else if (i === 2) currentBoard[0][2] = game.currentPlayer;else if (i === 3) currentBoard[1][0] = game.currentPlayer;else if (i === 4) currentBoard[1][1] = game.currentPlayer;else if (i === 5) currentBoard[1][2] = game.currentPlayer;else if (i === 6) currentBoard[2][0] = game.currentPlayer;else if (i === 7) currentBoard[2][1] = game.currentPlayer;else currentBoard[2][2] = game.currentPlayer;\n\n    // Check for a win after each turn\n    if (checkWin(currentBoard)) {\n      // Player wins, update game state\n      const currentPlayer = game.currentPlayer;\n      const updatedScore = game[currentPlayer.toLowerCase() + 'Score'] + 1;\n\n      // Check if the current player has reached 5 wins\n      if (updatedScore === 5) {\n        // Stop the game and reset scores\n        setGame({\n          ...game,\n          board: currentBoard,\n          gameOver: true,\n          oScore: 0,\n          xScore: 0\n        });\n        console.log(`Player ${game.currentPlayer} wins the game!`);\n      } else {\n        // Update the score and reset the board for the next game\n        setGame({\n          ...game,\n          board: currentBoard,\n          currentPlayer: nextTurn(),\n          [currentPlayer.toLowerCase() + 'Score']: updatedScore\n        });\n        console.log(`Player ${game.currentPlayer} wins this round!`);\n        resetBoard();\n      }\n      return;\n    }\n\n    // Check for a draw\n    const isDraw = currentBoard.flat().every(cell => cell !== null);\n    if (isDraw) {\n      // Draw, update game state to stop the game\n      setGame({\n        ...game,\n        board: currentBoard,\n        currentPlayer: game.currentPlayer,\n        gameOver: true\n      });\n      console.log('It\\'s a draw!');\n      return;\n    }\n\n    // Switch to the next player's turn\n    setGame({\n      ...game,\n      board: currentBoard,\n      currentPlayer: nextTurn()\n    });\n  };\n  useEffect(() => {\n    // Enable the next button when the game is over\n    const nextButton = document.getElementById('next-button');\n    if (nextButton) {\n      nextButton.disabled = !game.gameOver;\n    }\n  }, [game.gameOver]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      currentPlayer: game.currentPlayer,\n      onClick: nextTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      children: game.board.flat().map((square, i) => {\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: square,\n          onClick: event => takeTurn(event, i)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"next-button\",\n      onClick: resetBoard,\n      disabled: !game.gameOver,\n      children: \"Next Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xoSmlDMbUBkcYYR0B6YzmdlCZMw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","GameBoard","Square","React","useState","useEffect","newBoard","App","game","setGame","currentPlayer","oScore","xScore","board","gameOver","nextTurn","nextPlayer","checkWin","currentBoard","resetBoard","takeTurn","event","i","preventDefault","updatedScore","toLowerCase","console","log","isDraw","flat","every","cell","nextButton","document","getElementById","disabled","map","square"],"sources":["/Users/ahmetmenevse/code/ahmetmenevse/tic/tic-tac-toe/tic-tac/src/App.js"],"sourcesContent":["import './App.css';\nimport Navbar from './Components/Navbar';\nimport GameBoard from './Components/GameBoard';\nimport Square from './Components/Square';\nimport React, { useState, useEffect } from \"react\";\n\nconst newBoard = [\n  ['X', null, null],\n  [null, 'O', null],\n  [null, null, null],\n];\n\nfunction App() {\n  const [game, setGame] = useState({\n    currentPlayer: 'O',\n    oScore: 0,\n    xScore: 0,\n    board: newBoard,\n    gameOver: false,\n  });\n\n  const nextTurn = () => {\n    const nextPlayer = game.currentPlayer === 'O' ? 'X' : 'O';\n    return nextPlayer;\n  };\n\n  const checkWin = (currentBoard) => {\n    // Check win conditions...\n\n    // Return true if win condition is met\n    return false;\n  };\n\n  const resetBoard = () => {\n    setGame({\n      ...game,\n      board: newBoard,\n      currentPlayer: 'O',\n      gameOver: false,\n    });\n  };\n\n  const takeTurn = (event, i) => {\n    event.preventDefault();\n\n    // Don't continue if game is already over\n    if (game.gameOver) return;\n\n    let currentBoard = game.board;\n\n    // Update the board state based on the player's move\n    if (i === 0) currentBoard[0][0] = game.currentPlayer;\n    else if (i === 1) currentBoard[0][1] = game.currentPlayer;\n    else if (i === 2) currentBoard[0][2] = game.currentPlayer;\n    else if (i === 3) currentBoard[1][0] = game.currentPlayer;\n    else if (i === 4) currentBoard[1][1] = game.currentPlayer;\n    else if (i === 5) currentBoard[1][2] = game.currentPlayer;\n    else if (i === 6) currentBoard[2][0] = game.currentPlayer;\n    else if (i === 7) currentBoard[2][1] = game.currentPlayer;\n    else currentBoard[2][2] = game.currentPlayer;\n\n    // Check for a win after each turn\n    if (checkWin(currentBoard)) {\n      // Player wins, update game state\n      const currentPlayer = game.currentPlayer;\n      const updatedScore = game[currentPlayer.toLowerCase() + 'Score'] + 1;\n\n      // Check if the current player has reached 5 wins\n      if (updatedScore === 5) {\n        // Stop the game and reset scores\n        setGame({\n          ...game,\n          board: currentBoard,\n          gameOver: true,\n          oScore: 0,\n          xScore: 0,\n        });\n        console.log(`Player ${game.currentPlayer} wins the game!`);\n      } else {\n        // Update the score and reset the board for the next game\n        setGame({\n          ...game,\n          board: currentBoard,\n          currentPlayer: nextTurn(),\n          [currentPlayer.toLowerCase() + 'Score']: updatedScore,\n        });\n        console.log(`Player ${game.currentPlayer} wins this round!`);\n        resetBoard();\n      }\n      return;\n    }\n\n    // Check for a draw\n    const isDraw = currentBoard.flat().every((cell) => cell !== null);\n    if (isDraw) {\n      // Draw, update game state to stop the game\n      setGame({\n        ...game,\n        board: currentBoard,\n        currentPlayer: game.currentPlayer,\n        gameOver: true,\n      });\n      console.log('It\\'s a draw!');\n      return;\n    }\n\n    // Switch to the next player's turn\n    setGame({\n      ...game,\n      board: currentBoard,\n      currentPlayer: nextTurn(),\n    });\n  };\n\n  useEffect(() => {\n    // Enable the next button when the game is over\n    const nextButton = document.getElementById('next-button');\n    if (nextButton) {\n      nextButton.disabled = !game.gameOver;\n    }\n  }, [game.gameOver]);\n\n  return (\n    <div className=\"App\">\n      <Navbar currentPlayer={game.currentPlayer} onClick={nextTurn} />\n      <GameBoard>\n        {game.board.flat().map((square, i) => {\n          return <Square key={i} value={square} onClick={(event) => takeTurn(event, i)} />;\n        })}\n      </GameBoard>\n      <button id=\"next-button\" onClick={resetBoard} disabled={!game.gameOver}>\n        Next Game\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}